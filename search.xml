<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Remove Nth Node From End of List</title>
    <url>/2019/12/12/Remove-Nth-Node-From-End-of-List/</url>
    <content><![CDATA[<h3 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h3><h3 id="Given-a-linked-list-remove-the-n-th-node-from-the-end-of-list-and-return-its-head"><a href="#Given-a-linked-list-remove-the-n-th-node-from-the-end-of-list-and-return-its-head" class="headerlink" title="Given a linked list, remove the n-th node from the end of list and return its head."></a>Given a linked list, remove the <em>n</em>-th node from the end of list and return its head.</h3><p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Given linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5, and n = 2.</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">After removing the second node from the end, the linked list becomes 1-&gt;2-&gt;3-&gt;5.</span></pre></td></tr></tbody></table></figure>

<p><strong>Note:</strong></p>
<p>Given <em>n</em> will always be valid.</p>
<p><strong>Follow up:</strong></p>
<p>Could you do this in one pass?</p>
<p>去除单向链表中的倒数第n个节点。n总是有效的，需要只遍历一遍</p>
<h3 id="解"><a href="#解" class="headerlink" title="解"></a>解</h3><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>每日一练</category>
      </categories>
      <tags>
        <tag>算法题</tag>
      </tags>
  </entry>
  <entry>
    <title>Letter Combinations of a Phone Number</title>
    <url>/2019/12/10/Letter-Combinations-of-a-Phone-Number/</url>
    <content><![CDATA[<h3 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h3><p>Given a string containing digits from <code>2-9</code> inclusive, return all possible letter combinations that the number could represent.</p>
<p>A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</p>
<a id="more"></a>

<p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Telephone-keypad2.svg/200px-Telephone-keypad2.svg.png" alt="img"></p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Input: "23"</span></pre></td></tr><tr><td class="code"><pre><span class="line">Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].</span></pre></td></tr></tbody></table></figure>

<p><strong>Note:</strong></p>
<p>Although the above answer is in lexicographical order, your answer could be in any order you want.</p>
<p>给一串由2-9组成的字符串，每个数字对应9键手机的字母表。返回可能生成的所有字符串</p>
<p><em>排列顺序任意</em></p>
<h3 id="解"><a href="#解" class="headerlink" title="解"></a>解</h3><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">private</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">help</span><span class="params">(<span class="built_in">string</span>&amp; digits, <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>, <span class="built_in">string</span>&gt;&amp; phoneMap, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; ret, <span class="built_in">string</span> tmp, <span class="keyword">int</span> i)</span> </span>{</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (i == digits.<span class="built_in">size</span>()) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">            ret.emplace_back(tmp);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">char</span> c = digits[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">string</span> letter = phoneMap[c];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; letter.<span class="built_in">size</span>(); j++) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">            help(digits, phoneMap, ret, tmp+letter[j], i+<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; letterCombinations(<span class="built_in">string</span> digits) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (digits.<span class="built_in">size</span>() == <span class="number">0</span>) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>, <span class="built_in">string</span>&gt; phoneMap;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        phoneMap[<span class="string">'2'</span>] = <span class="string">"abc"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        phoneMap[<span class="string">'3'</span>] = <span class="string">"def"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        phoneMap[<span class="string">'4'</span>] = <span class="string">"ghi"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        phoneMap[<span class="string">'5'</span>] = <span class="string">"jkl"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        phoneMap[<span class="string">'6'</span>] = <span class="string">"mno"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        phoneMap[<span class="string">'7'</span>] = <span class="string">"pqrs"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        phoneMap[<span class="string">'8'</span>] = <span class="string">"tuv"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        phoneMap[<span class="string">'9'</span>] = <span class="string">"wxyz"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        help(digits, phoneMap, ret, <span class="string">""</span>, <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="code"><pre><span class="line">};</span></pre></td></tr></tbody></table></figure>

<p>Runtime: 0 ms</p>
<p>Memory Usage: 8.6 MB</p>
<p>内存占用应该可以进一步优化，每次传送的字符串tmp可以换成定长的字符串数组。C++的API还不太熟，暂时写成这样。有C++大神可以交流交流</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>每日一练</category>
      </categories>
      <tags>
        <tag>算法题</tag>
      </tags>
  </entry>
  <entry>
    <title>Reinforcement-learning</title>
    <url>/2019/12/06/Reinforcement-learning/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h3 id="强化学习的两大特点："><a href="#强化学习的两大特点：" class="headerlink" title="强化学习的两大特点："></a>强化学习的两大特点：</h3><ul>
<li>试错搜索：强化学习过程中不会有label反馈给模型，而是让模型学习哪种action可以获得最大的reward。</li>
<li>延迟奖励：大部分情况下，当前的action不但会影响此刻返回的reward，还会影响接下来序列的reward.</li>
</ul>
<a id="more"></a>

<h3 id="强化学习的组成："><a href="#强化学习的组成：" class="headerlink" title="强化学习的组成："></a>强化学习的组成：</h3><ul>
<li>智能体（agent）：个人理解就是模型</li>
<li>状态（state）</li>
<li>奖励（reward）</li>
<li>动作（action）</li>
<li>环境（environment）</li>
</ul>
<h3 id="RLbook2018中，将强化学习分为以下几个要素："><a href="#RLbook2018中，将强化学习分为以下几个要素：" class="headerlink" title="RLbook2018中，将强化学习分为以下几个要素："></a>RLbook2018中，将强化学习分为以下几个要素：</h3><ul>
<li>智能体（agent）</li>
<li>环境（environment）</li>
<li>策略（policy）：就是定义了一个映射，当感知到了environment处于何种state时应该做出的action</li>
<li>奖励信号(reward signal)：每一步，environment都会返回给agent一个数值作为reward。目标就是使reward长期最大化</li>
<li>价值函数（value function）：reward是即使反馈的信号，value function用来衡量长期运行的最优值</li>
<li>模型（model）：model是用来模拟environment，推断出environment的表现</li>
</ul>
<h3 id="强化学习的分类："><a href="#强化学习的分类：" class="headerlink" title="强化学习的分类："></a>强化学习的分类：</h3><ul>
<li>Model-based：基于model来解决强化学习问题。</li>
<li>Model-free：不需要使用model模拟environment。一般model-free直接在真实环境中学习，所以不需要构建model</li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>强化学习</tag>
      </tags>
  </entry>
</search>
