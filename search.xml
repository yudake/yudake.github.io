<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Search Insert Position</title>
    <url>/2019/12/23/Search-Insert-Position/</url>
    <content><![CDATA[<h3 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h3><p>Given a sorted  array and a target value, return the index if the target is found. If  not, return the index where it would be if it were inserted in order.</p>
<p>You may assume no duplicates in the array.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Input: [1,3,5,6], 5</span></pre></td></tr><tr><td class="code"><pre><span class="line">Output: 2</span></pre></td></tr></tbody></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Input: [1,3,5,6], 2</span></pre></td></tr><tr><td class="code"><pre><span class="line">Output: 1</span></pre></td></tr></tbody></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Input: [1,3,5,6], 7</span></pre></td></tr><tr><td class="code"><pre><span class="line">Output: 4</span></pre></td></tr></tbody></table></figure>

<p><strong>Example 4:</strong></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Input: [1,3,5,6], 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">Output: 0</span></pre></td></tr></tbody></table></figure>

<a id="more"></a>

<h3 id="解"><a href="#解" class="headerlink" title="解"></a>解</h3><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>{</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> mid = (right - left) / <span class="number">2</span> + left;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span>(left &lt;= right) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">            mid = (right - left) / <span class="number">2</span> + left;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> (nums[mid] == target) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">return</span> mid;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">                left = mid + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            } <span class="keyword">else</span> {</span></pre></td></tr><tr><td class="code"><pre><span class="line">                right = mid - <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            }</span></pre></td></tr><tr><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (nums[mid] &lt; target) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> mid+<span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        } <span class="keyword">else</span> {</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> mid;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="code"><pre><span class="line">};</span></pre></td></tr></tbody></table></figure>

<p>Runtime: <strong>8 ms</strong></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>每日一练</category>
      </categories>
      <tags>
        <tag>算法题</tag>
      </tags>
  </entry>
  <entry>
    <title>Find First and Last Position of Element in Sorted Array</title>
    <url>/2019/12/23/Find-First-and-Last-Position-of-Element-in-Sorted-Array/</url>
    <content><![CDATA[<h3 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h3><p>Given an array of integers <code>nums</code> sorted in ascending order, find the starting and ending position of a given <code>target</code> value.</p>
<p>Your algorithm’s runtime complexity must be in the order of <em>O</em>(log <em>n</em>).</p>
<p>If the target is not found in the array, return <code>[-1, -1]</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Input: nums = [5,7,7,8,8,10], target = 8</span></pre></td></tr><tr><td class="code"><pre><span class="line">Output: [3,4]</span></pre></td></tr></tbody></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Input: nums = [5,7,7,8,8,10], target = 6</span></pre></td></tr><tr><td class="code"><pre><span class="line">Output: [-1,-1]</span></pre></td></tr></tbody></table></figure>

<a id="more"></a>

<h3 id="解"><a href="#解" class="headerlink" title="解"></a>解</h3><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">private</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findLeft</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>{</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> ret = <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span> (left &lt;= right) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">int</span> mid = (right - left) / <span class="number">2</span> + left;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> (nums[mid] == target) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">                ret = mid;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                right = mid - <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">                left = mid + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            } <span class="keyword">else</span> {</span></pre></td></tr><tr><td class="code"><pre><span class="line">                right = mid - <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            }</span></pre></td></tr><tr><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findRight</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>{</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> ret = <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span> (left &lt;= right) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">int</span> mid = (right - left) / <span class="number">2</span> + left;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> (nums[mid] == target) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">                ret = mid;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                left = mid + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">                left = mid + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            } <span class="keyword">else</span> {</span></pre></td></tr><tr><td class="code"><pre><span class="line">                right = mid - <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            }</span></pre></td></tr><tr><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; searchRange(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">size</span>() == <span class="number">0</span>) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">            ret.emplace_back(<span class="number">-1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            ret.emplace_back(<span class="number">-1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ret.emplace_back(findLeft(nums, target));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ret.emplace_back(findRight(nums, target));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="code"><pre><span class="line">};</span></pre></td></tr></tbody></table></figure>

<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>每日一练</category>
      </categories>
      <tags>
        <tag>算法题</tag>
      </tags>
  </entry>
  <entry>
    <title>Top-K Off-Policy Correction for a REINFORCE Recommender System</title>
    <url>/2019/12/23/Top-K-Off-Policy-Correction-for-a-REINFORCE-Recommender-System/</url>
    <content><![CDATA[<h1 id="论文介绍"><a href="#论文介绍" class="headerlink" title="论文介绍"></a>论文介绍</h1><p>本篇论文是2018年Google发表的论文，应该是应用在YouTube的召回层。看其他人<a href="http://wd1900.github.io/2019/06/23/Top-K-Off-Policy-Correction-for-a-REINFORCE-Recommender-System-on-Youtube/" target="_blank" rel="noopener">分享</a>说是最近两年单次上线最高收益</p>
<p>论文链接：<a href="https://arxiv.org/pdf/1812.02353.pdf" target="_blank" rel="noopener">https://arxiv.org/pdf/1812.02353.pdf</a></p>
<h1 id="论文背景"><a href="#论文背景" class="headerlink" title="论文背景"></a>论文背景</h1><p>现在推荐系统的item在百万级别，user在十亿级别。在任意时间二者间产生的一个行为都是独一无二的。</p>
<p>这导致用户状态空间非常复杂。日志记录的隐式反馈很方便用于学习。</p>
<p>但是日志反馈的问题是：</p>
<ul>
<li>没被系统推出来的没有日志反馈，会有偏差</li>
</ul>
<p>论文主要做了一下几个事：</p>
<ul>
<li>本篇论文提出了一种  <strong>Top-K</strong>  算法可以消除此偏差。此算法基于策略梯度，即REINFORCE(此算法给出了<a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.31.2545&amp;rep=rep1&amp;type=pdf" target="_blank" rel="noopener">参考论文</a>，笔者还未阅读)</li>
<li>使用了一种非策略方案校准偏差</li>
<li></li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>强化学习</category>
      </categories>
      <tags>
        <tag>强化学习</tag>
        <tag>Google</tag>
        <tag>召回</tag>
      </tags>
  </entry>
  <entry>
    <title>Remove Element</title>
    <url>/2019/12/19/Remove-Element/</url>
    <content><![CDATA[<h3 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h3><p>Given an array <em>nums</em> and a value <em>val</em>, remove all instances of that value <a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank" rel="noopener"><strong>in-place</strong></a> and return the new length.</p>
<p>Do not allocate extra space for another array, you must do this by <strong>modifying the input array in-place</strong> with O(1) extra memory.</p>
<p>The order of elements can be changed. It doesn’t matter what you leave beyond the new length.</p>
<a id="more"></a>

<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Given nums = [3,2,2,3], val = 3,</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Your function should return length = 2, with the first two elements of nums being 2.</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">It doesn't matter what you leave beyond the returned length.</span></pre></td></tr></tbody></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Given nums = [0,1,2,2,3,0,4,2], val = 2,</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Your function should return length = 5, with the first five elements of nums containing 0, 1, 3, 0, and 4.</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Note that the order of those five elements can be arbitrary.</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">It doesn't matter what values are set beyond the returned length.</span></pre></td></tr></tbody></table></figure>

<p><strong>Clarification:</strong></p>
<p>Confused why the returned value is an integer but your answer is an array?</p>
<p>Note that the input array is passed in by <strong>reference</strong>, which means modification to the input array will be known to the caller as well.</p>
<p>Internally you can think of this:</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">// nums is passed in by reference. (i.e., without making a copy)</span></pre></td></tr><tr><td class="code"><pre><span class="line">int len = removeElement(nums, val);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">// any modification to nums in your function would be known by the caller.</span></pre></td></tr><tr><td class="code"><pre><span class="line">// using the length returned by your function, it prints the first len elements.</span></pre></td></tr><tr><td class="code"><pre><span class="line">for (int i = 0; i &lt; len; i++) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(nums[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure>

<h3 id="解"><a href="#解" class="headerlink" title="解"></a>解</h3><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> val)</span> </span>{</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> (nums[i] != val) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">                nums[ret++] = nums[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">            }</span></pre></td></tr><tr><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="code"><pre><span class="line">};</span></pre></td></tr></tbody></table></figure>

<p>Runtime: <strong>8 ms</strong></p>
<p>Memory Usage: <strong>8.7 MB</strong></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>每日一练</category>
      </categories>
      <tags>
        <tag>算法题</tag>
      </tags>
  </entry>
  <entry>
    <title>Remove Duplicates from Sorted Array</title>
    <url>/2019/12/19/Remove-Duplicates-from-Sorted-Array/</url>
    <content><![CDATA[<h3 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h3><p>Given a sorted array <em>nums</em>, remove the duplicates <a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank" rel="noopener"><strong>in-place</strong></a> such that each element appear only <em>once</em> and return the new length.</p>
<p>Do not allocate extra space for another array, you must do this by <strong>modifying the input array in-place</strong> with O(1) extra memory.</p>
<a id="more"></a>

<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Given nums = [1,1,2],</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively.</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">It doesn't matter what you leave beyond the returned length.</span></pre></td></tr></tbody></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Given nums = [0,0,1,1,1,2,2,3,3,4],</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Your function should return length = 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively.</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">It doesn't matter what values are set beyond the returned length.</span></pre></td></tr></tbody></table></figure>

<p><strong>Clarification:</strong></p>
<p>Confused why the returned value is an integer but your answer is an array?</p>
<p>Note that the input array is passed in by <strong>reference</strong>, which means modification to the input array will be known to the caller as well.</p>
<p>Internally you can think of this:</p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">// nums is passed in by reference. (i.e., without making a copy)</span></pre></td></tr><tr><td class="code"><pre><span class="line">int len = removeDuplicates(nums);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">// any modification to nums in your function would be known by the caller.</span></pre></td></tr><tr><td class="code"><pre><span class="line">// using the length returned by your function, it prints the first len elements.</span></pre></td></tr><tr><td class="code"><pre><span class="line">for (int i = 0; i &lt; len; i++) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(nums[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">}</span></pre></td></tr></tbody></table></figure>

<h3 id="解"><a href="#解" class="headerlink" title="解"></a>解</h3><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>{</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">size</span>() == <span class="number">0</span>) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.<span class="built_in">size</span>(); i++) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> (nums[i] == nums[i<span class="number">-1</span>]) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            }</span></pre></td></tr><tr><td class="code"><pre><span class="line">            ret++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            nums[ret] = nums[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> ret+<span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="code"><pre><span class="line">};</span></pre></td></tr></tbody></table></figure>

<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>每日一练</category>
      </categories>
      <tags>
        <tag>算法题</tag>
      </tags>
  </entry>
  <entry>
    <title>Reverse Nodes in k-Group</title>
    <url>/2019/12/17/Reverse-Nodes-in-k-Group/</url>
    <content><![CDATA[<h3 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h3><p>Given a linked list, reverse the nodes of a linked list <em>k</em> at a time and return its modified list.</p>
<p><em>k</em> is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of <em>k</em> then left-out nodes in the end should remain as it is.</p>
<p><strong>Example:</strong></p>
<p>Given this linked list: <code>1-&gt;2-&gt;3-&gt;4-&gt;5</code></p>
<p>For <em>k</em> = 2, you should return: <code>2-&gt;1-&gt;4-&gt;3-&gt;5</code></p>
<p>For <em>k</em> = 3, you should return: <code>3-&gt;2-&gt;1-&gt;4-&gt;5</code></p>
<p><strong>Note:</strong></p>
<ul>
<li>Only constant extra memory is allowed.</li>
<li>You may not alter the values in the list’s nodes, only nodes itself may be changed.</li>
</ul>
<a id="more"></a>

<h3 id="解"><a href="#解" class="headerlink" title="解"></a>解</h3><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * struct ListNode {</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *     int val;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *     ListNode *next;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) {}</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * };</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function">ListNode* <span class="title">reverseKGroup</span><span class="params">(ListNode* head, <span class="keyword">int</span> k)</span> </span>{</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (k &lt; <span class="number">2</span>) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> head;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="function">ListNode <span class="title">first</span><span class="params">(<span class="number">-1</span>)</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        first.next = head;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ListNode* pre = &amp;first;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ListNode* node = pre;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> (node-&gt;next == <span class="literal">NULL</span>) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">return</span> pre-&gt;next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            }</span></pre></td></tr><tr><td class="code"><pre><span class="line">            node = node-&gt;next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ListNode* tmp = head;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">do</span> {</span></pre></td></tr><tr><td class="code"><pre><span class="line">            tmp = head-&gt;next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            head-&gt;next = tmp-&gt;next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            tmp-&gt;next = pre-&gt;next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            pre-&gt;next = tmp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        } <span class="keyword">while</span> (tmp != node);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        head-&gt;next = reverseKGroup(head-&gt;next, k);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> pre-&gt;next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="code"><pre><span class="line">};</span></pre></td></tr></tbody></table></figure>

<p>Runtime: <strong>16 ms</strong></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>每日一练</category>
      </categories>
      <tags>
        <tag>算法题</tag>
      </tags>
  </entry>
  <entry>
    <title>PyTorch入门</title>
    <url>/2019/12/17/PyTorch%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>目前我是在mac上使用conda进行安装，安装方式很简单</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">conda install -c pytorch pytorch</span></pre></td></tr></tbody></table></figure>

<p>Anaconda在自己的个人机器上使用非常方便，很多扩展包已经预先安装好了。安装新的包也很方便，所以建议在个人使用的开发机可以先安装一个anaconda。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>PyTorch</category>
      </categories>
      <tags>
        <tag>PyTorch</tag>
      </tags>
  </entry>
  <entry>
    <title>Swap Nodes in Pairs</title>
    <url>/2019/12/16/Swap-Nodes-in-Pairs/</url>
    <content><![CDATA[<h3 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h3><p>Given a linked list, swap every two adjacent nodes and return its head.</p>
<p>You may <strong>not</strong> modify the values in the list’s nodes, only nodes itself may be changed.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Given 1-&gt;2-&gt;3-&gt;4, you should return the list as 2-&gt;1-&gt;4-&gt;3.</span></pre></td></tr></tbody></table></figure>



<a id="more"></a>



<h3 id="解"><a href="#解" class="headerlink" title="解"></a>解</h3><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * struct ListNode {</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *     int val;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *     ListNode *next;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) {}</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * };</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function">ListNode* <span class="title">swapPairs</span><span class="params">(ListNode* head)</span> </span>{</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="function">ListNode <span class="title">first</span><span class="params">(<span class="number">-1</span>)</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        first.next = head;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ListNode* pre = &amp;first;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span> (head != <span class="literal">NULL</span> &amp;&amp; head-&gt;next != <span class="literal">NULL</span>) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">            ListNode* node = head-&gt;next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            head-&gt;next = node-&gt;next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            node-&gt;next = head;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            pre-&gt;next = node;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            pre = head;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            head = head-&gt;next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> first.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="code"><pre><span class="line">};</span></pre></td></tr></tbody></table></figure>

<p>Runtime: <strong>4 ms</strong></p>
<p>Memory Usage: <strong>8.5 MB</strong></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>每日一练</category>
      </categories>
      <tags>
        <tag>算法题</tag>
      </tags>
  </entry>
  <entry>
    <title>Merge k Sorted Lists</title>
    <url>/2019/12/16/Merge-k-Sorted-Lists/</url>
    <content><![CDATA[<h3 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h3><p>Merge <em>k</em> sorted linked lists and return it as one sorted list. Analyze and describe its complexity.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Input:</span></pre></td></tr><tr><td class="code"><pre><span class="line">[</span></pre></td></tr><tr><td class="code"><pre><span class="line">  1-&gt;4-&gt;5,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  1-&gt;3-&gt;4,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  2-&gt;6</span></pre></td></tr><tr><td class="code"><pre><span class="line">]</span></pre></td></tr><tr><td class="code"><pre><span class="line">Output: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</span></pre></td></tr></tbody></table></figure>

<a id="more"></a>

<h3 id="解"><a href="#解" class="headerlink" title="解"></a>解</h3><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * struct ListNode {</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *     int val;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *     ListNode *next;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) {}</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * };</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">private</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mergeTwoLists</span><span class="params">(<span class="built_in">vector</span>&lt;ListNode*&gt;&amp; lists, <span class="built_in">vector</span>&lt;ListNode*&gt;&amp; lists2, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>{</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ListNode* l1 = lists[left];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ListNode* l2 = lists[right];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="function">ListNode <span class="title">first</span><span class="params">(<span class="number">0</span>)</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ListNode* pre = &amp;first;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span> (l1 != <span class="literal">NULL</span> &amp;&amp; l2 != <span class="literal">NULL</span>) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> (l2-&gt;val &lt; l1-&gt;val) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">                pre-&gt;next = l2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                pre = pre-&gt;next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                l2 = l2-&gt;next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            } <span class="keyword">else</span> {</span></pre></td></tr><tr><td class="code"><pre><span class="line">                pre-&gt;next = l1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                pre = pre-&gt;next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                l1 = l1-&gt;next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            }</span></pre></td></tr><tr><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (l1 != <span class="literal">NULL</span>) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">            pre-&gt;next = l1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (l2 != <span class="literal">NULL</span>) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">            pre-&gt;next = l2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="code"><pre><span class="line">        lists2.emplace_back(first.next);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function">ListNode* <span class="title">mergeKLists</span><span class="params">(<span class="built_in">vector</span>&lt;ListNode*&gt;&amp; lists)</span> </span>{</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (lists.<span class="built_in">size</span>() == <span class="number">1</span>) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> lists[<span class="number">0</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (lists.<span class="built_in">size</span>() == <span class="number">0</span>) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">vector</span>&lt;ListNode*&gt; lists2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> right = lists.<span class="built_in">size</span>() - <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> left = <span class="number">0</span>; left &lt;= right; left++) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> (left == right) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">                lists2.emplace_back(lists[left]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            } <span class="keyword">else</span> {</span></pre></td></tr><tr><td class="code"><pre><span class="line">                mergeTwoLists(lists, lists2, left, right);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            }</span></pre></td></tr><tr><td class="code"><pre><span class="line">            right--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ListNode* ret = mergeKLists(lists2);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="code"><pre><span class="line">};</span></pre></td></tr></tbody></table></figure>

<p>Runtime: <strong>24 ms</strong></p>
<p>Memory Usage: <strong>11.3 MB</strong></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>每日一练</category>
      </categories>
      <tags>
        <tag>算法题</tag>
      </tags>
  </entry>
  <entry>
    <title>Generate Parentheses</title>
    <url>/2019/12/16/Generate-Parentheses/</url>
    <content><![CDATA[<h3 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h3><p> Given <em>n</em> pairs of parentheses, write a function to generate all combinations of well-formed parentheses. </p>
<p> For example, given <em>n</em> = 3, a solution set is: </p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">[</span></pre></td></tr><tr><td class="code"><pre><span class="line">  "((()))",</span></pre></td></tr><tr><td class="code"><pre><span class="line">  "(()())",</span></pre></td></tr><tr><td class="code"><pre><span class="line">  "(())()",</span></pre></td></tr><tr><td class="code"><pre><span class="line">  "()(())",</span></pre></td></tr><tr><td class="code"><pre><span class="line">  "()()()"</span></pre></td></tr><tr><td class="code"><pre><span class="line">]</span></pre></td></tr></tbody></table></figure>



<a id="more"></a>



<h3 id="解"><a href="#解" class="headerlink" title="解"></a>解</h3><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">private</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">help</span> <span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; ret, <span class="built_in">string</span> tmp, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>{</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (left &gt; right) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (right == <span class="number">0</span>) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">            ret.emplace_back(tmp);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (left &gt; <span class="number">0</span>) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">            help(ret, tmp+<span class="string">"("</span>, left<span class="number">-1</span>, right);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="code"><pre><span class="line">        help(ret, tmp+<span class="string">")"</span>, left, right<span class="number">-1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; generateParenthesis(<span class="keyword">int</span> n) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">1</span>) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="code"><pre><span class="line">        help(ret, <span class="string">""</span>, n, n);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="code"><pre><span class="line">};</span></pre></td></tr></tbody></table></figure>

<p>Runtime: <strong>8 ms</strong></p>
<p>Memory Usage: <strong>17.3 MB</strong></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>每日一练</category>
      </categories>
      <tags>
        <tag>算法题</tag>
      </tags>
  </entry>
  <entry>
    <title>Merge Two Sorted Lists</title>
    <url>/2019/12/16/Merge-Two-Sorted-Lists/</url>
    <content><![CDATA[<h3 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h3><p>Merge two sorted  linked lists and return it as a new list. The new list should be made by  splicing together the nodes of the first two lists.</p>
<p><strong>Example:</strong> </p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Input: 1-&gt;2-&gt;4, 1-&gt;3-&gt;4</span></pre></td></tr><tr><td class="code"><pre><span class="line">Output: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</span></pre></td></tr></tbody></table></figure>

<a id="more"></a>

<h3 id="解"><a href="#解" class="headerlink" title="解"></a>解</h3><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * struct ListNode {</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *     int val;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *     ListNode *next;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) {}</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * };</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>{</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="function">ListNode <span class="title">first</span><span class="params">(<span class="number">0</span>)</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ListNode* pre = &amp;first;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span> (l1 != <span class="literal">NULL</span> &amp;&amp; l2 != <span class="literal">NULL</span>) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> (l2-&gt;val &lt; l1-&gt;val) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">                pre-&gt;next = l2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                pre = pre-&gt;next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                l2 = l2-&gt;next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            } <span class="keyword">else</span> {</span></pre></td></tr><tr><td class="code"><pre><span class="line">                pre-&gt;next = l1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                pre = pre-&gt;next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                l1 = l1-&gt;next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            }</span></pre></td></tr><tr><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (l1 != <span class="literal">NULL</span>) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">            pre-&gt;next = l1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (l2 != <span class="literal">NULL</span>) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">            pre-&gt;next = l2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> first.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="code"><pre><span class="line">};</span></pre></td></tr></tbody></table></figure>

<p>Runtime: <strong>4 ms</strong></p>
<p>Memory Usage: <strong>8.9 MB</strong></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>每日一练</category>
      </categories>
      <tags>
        <tag>算法题</tag>
      </tags>
  </entry>
  <entry>
    <title>Valid Parentheses</title>
    <url>/2019/12/13/Valid-Parentheses/</url>
    <content><![CDATA[<h3 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h3><p>Given a string containing just the characters <code>'('</code>, <code>')'</code>, <code>'{'</code>, <code>'}'</code>, <code>'['</code> and <code>']'</code>, determine if the input string is valid.</p>
<p>An input string is valid if:</p>
<ol>
<li>Open brackets must be closed by the same type of brackets.</li>
<li>Open brackets must be closed in the correct order.</li>
</ol>
<p>Note that an empty string is also considered valid.</p>
<a id="more"></a>

<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Input: "()"</span></pre></td></tr><tr><td class="code"><pre><span class="line">Output: true</span></pre></td></tr></tbody></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Input: "()[]{}"</span></pre></td></tr><tr><td class="code"><pre><span class="line">Output: true</span></pre></td></tr></tbody></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Input: "(]"</span></pre></td></tr><tr><td class="code"><pre><span class="line">Output: false</span></pre></td></tr></tbody></table></figure>

<p><strong>Example 4:</strong></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Input: "([)]"</span></pre></td></tr><tr><td class="code"><pre><span class="line">Output: false</span></pre></td></tr></tbody></table></figure>

<p><strong>Example 5:</strong></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Input: "{[]}"</span></pre></td></tr><tr><td class="code"><pre><span class="line">Output: true</span></pre></td></tr></tbody></table></figure>

<p>判断一个字符串是不是合法的，字符串只由括号组成。空字符串也认为合法</p>
<h3 id="解"><a href="#解" class="headerlink" title="解"></a>解</h3><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isValid</span><span class="params">(<span class="built_in">string</span> s)</span> </span>{</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (s.<span class="built_in">size</span>() == <span class="number">0</span>) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (s.<span class="built_in">size</span>() % <span class="number">2</span> == <span class="number">1</span>) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; stk;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">char</span> c = s[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> (c == <span class="string">'{'</span> || c == <span class="string">'['</span> || c == <span class="string">'('</span>) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">                stk.push(c);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            } <span class="keyword">else</span> {</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">if</span> (stk.<span class="built_in">size</span>() == <span class="number">0</span>) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'}'</span>) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">char</span> c2 = stk.top();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">if</span> (c2 != <span class="string">'{'</span>) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    } <span class="keyword">else</span> {</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        stk.pop();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    }</span></pre></td></tr><tr><td class="code"><pre><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">']'</span>) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">char</span> c2 = stk.top();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">if</span> (c2 != <span class="string">'['</span>) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    } <span class="keyword">else</span> {</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        stk.pop();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    }</span></pre></td></tr><tr><td class="code"><pre><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">')'</span>) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">char</span> c2 = stk.top();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">if</span> (c2 != <span class="string">'('</span>) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    } <span class="keyword">else</span> {</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        stk.pop();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    }</span></pre></td></tr><tr><td class="code"><pre><span class="line">                }</span></pre></td></tr><tr><td class="code"><pre><span class="line">            }</span></pre></td></tr><tr><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> stk.<span class="built_in">size</span>() == <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="code"><pre><span class="line">};</span></pre></td></tr></tbody></table></figure>

<p>Runtime: 4 ms</p>
<p>Memory Usage: 8.3 MB</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>每日一练</category>
      </categories>
      <tags>
        <tag>算法题</tag>
      </tags>
  </entry>
  <entry>
    <title>Remove Nth Node From End of List</title>
    <url>/2019/12/12/Remove-Nth-Node-From-End-of-List/</url>
    <content><![CDATA[<h3 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h3><p>Given a linked list, remove the <em>n</em>-th node from the end of list and return its head.</p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Given linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5, and n = 2.</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">After removing the second node from the end, the linked list becomes 1-&gt;2-&gt;3-&gt;5.</span></pre></td></tr></tbody></table></figure>

<p><strong>Note:</strong></p>
<p>Given <em>n</em> will always be valid.</p>
<p><strong>Follow up:</strong></p>
<p>Could you do this in one pass?</p>
<a id="more"></a>

<p>去除单向链表中的倒数第n个节点。n总是有效的，需要只遍历一遍</p>
<h3 id="解"><a href="#解" class="headerlink" title="解"></a>解</h3><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * struct ListNode {</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *     int val;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *     ListNode *next;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) {}</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * };</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="keyword">int</span> n)</span> </span>{</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (head == <span class="literal">NULL</span>) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> head;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="function">ListNode <span class="title">first</span><span class="params">(<span class="number">-1</span>)</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        first.next = head;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ListNode* pre = &amp;first;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span> (n-- &gt; <span class="number">1</span>) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">            head = head-&gt;next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span> (head-&gt;next != <span class="literal">NULL</span>) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">            head = head-&gt;next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            pre = pre-&gt;next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="code"><pre><span class="line">        pre-&gt;next = pre-&gt;next-&gt;next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> first.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="code"><pre><span class="line">};</span></pre></td></tr></tbody></table></figure>

<p>Runtime: 4 ms</p>
<p>Memory Usage: 8.6 MB</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>每日一练</category>
      </categories>
      <tags>
        <tag>算法题</tag>
      </tags>
  </entry>
  <entry>
    <title>Letter Combinations of a Phone Number</title>
    <url>/2019/12/10/Letter-Combinations-of-a-Phone-Number/</url>
    <content><![CDATA[<h3 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h3><p>Given a string containing digits from <code>2-9</code> inclusive, return all possible letter combinations that the number could represent.</p>
<p>A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</p>
<a id="more"></a>

<p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Telephone-keypad2.svg/200px-Telephone-keypad2.svg.png" alt="img"></p>
<p><strong>Example:</strong></p>
<figure class="highlight plain"><table><tbody><tr><td class="code"><pre><span class="line">Input: "23"</span></pre></td></tr><tr><td class="code"><pre><span class="line">Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].</span></pre></td></tr></tbody></table></figure>

<p><strong>Note:</strong></p>
<p>Although the above answer is in lexicographical order, your answer could be in any order you want.</p>
<p>给一串由2-9组成的字符串，每个数字对应9键手机的字母表。返回可能生成的所有字符串</p>
<p><em>排列顺序任意</em></p>
<h3 id="解"><a href="#解" class="headerlink" title="解"></a>解</h3><figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">private</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">help</span><span class="params">(<span class="built_in">string</span>&amp; digits, <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>, <span class="built_in">string</span>&gt;&amp; phoneMap, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; ret, <span class="built_in">string</span> tmp, <span class="keyword">int</span> i)</span> </span>{</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (i == digits.<span class="built_in">size</span>()) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">            ret.emplace_back(tmp);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">char</span> c = digits[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">string</span> letter = phoneMap[c];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; letter.<span class="built_in">size</span>(); j++) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">            help(digits, phoneMap, ret, tmp+letter[j], i+<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; letterCombinations(<span class="built_in">string</span> digits) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (digits.<span class="built_in">size</span>() == <span class="number">0</span>) {</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        }</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>, <span class="built_in">string</span>&gt; phoneMap;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        phoneMap[<span class="string">'2'</span>] = <span class="string">"abc"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        phoneMap[<span class="string">'3'</span>] = <span class="string">"def"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        phoneMap[<span class="string">'4'</span>] = <span class="string">"ghi"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        phoneMap[<span class="string">'5'</span>] = <span class="string">"jkl"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        phoneMap[<span class="string">'6'</span>] = <span class="string">"mno"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        phoneMap[<span class="string">'7'</span>] = <span class="string">"pqrs"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        phoneMap[<span class="string">'8'</span>] = <span class="string">"tuv"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        phoneMap[<span class="string">'9'</span>] = <span class="string">"wxyz"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        help(digits, phoneMap, ret, <span class="string">""</span>, <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    }</span></pre></td></tr><tr><td class="code"><pre><span class="line">};</span></pre></td></tr></tbody></table></figure>

<p>Runtime: 0 ms</p>
<p>Memory Usage: 8.6 MB</p>
<p>内存占用应该可以进一步优化，每次传送的字符串tmp可以换成定长的字符串数组。C++的API还不太熟，暂时写成这样。有C++大神可以交流交流</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>每日一练</category>
      </categories>
      <tags>
        <tag>算法题</tag>
      </tags>
  </entry>
  <entry>
    <title>Reinforcement-learning</title>
    <url>/2019/12/06/Reinforcement-learning/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h3 id="强化学习的两大特点："><a href="#强化学习的两大特点：" class="headerlink" title="强化学习的两大特点："></a>强化学习的两大特点：</h3><ul>
<li>试错搜索：强化学习过程中不会有label反馈给模型，而是让模型学习哪种action可以获得最大的reward。</li>
<li>延迟奖励：大部分情况下，当前的action不但会影响此刻返回的reward，还会影响接下来序列的reward.</li>
</ul>
<a id="more"></a>

<h3 id="强化学习的组成："><a href="#强化学习的组成：" class="headerlink" title="强化学习的组成："></a>强化学习的组成：</h3><ul>
<li>智能体（agent）：个人理解就是模型</li>
<li>状态（state）</li>
<li>奖励（reward）</li>
<li>动作（action）</li>
<li>环境（environment）</li>
</ul>
<h3 id="RLbook2018中，将强化学习分为以下几个要素："><a href="#RLbook2018中，将强化学习分为以下几个要素：" class="headerlink" title="RLbook2018中，将强化学习分为以下几个要素："></a>RLbook2018中，将强化学习分为以下几个要素：</h3><ul>
<li>智能体（agent）</li>
<li>环境（environment）</li>
<li>策略（policy）：就是定义了一个映射，当感知到了environment处于何种state时应该做出的action</li>
<li>奖励信号(reward signal)：每一步，environment都会返回给agent一个数值作为reward。目标就是使reward长期最大化</li>
<li>价值函数（value function）：reward是即使反馈的信号，value function用来衡量长期运行的最优值</li>
<li>模型（model）：model是用来模拟environment，推断出environment的表现</li>
</ul>
<h3 id="强化学习的分类："><a href="#强化学习的分类：" class="headerlink" title="强化学习的分类："></a>强化学习的分类：</h3><ul>
<li>Model-based：基于model来解决强化学习问题。</li>
<li>Model-free：不需要使用model模拟environment。一般model-free直接在真实环境中学习，所以不需要构建model</li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>强化学习</tag>
      </tags>
  </entry>
</search>
